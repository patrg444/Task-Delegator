[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "claude-task-delegator"
version = "0.1.0"
description = "Orchestrate multiple Claude CLI instances for collaborative task execution"
readme = "README.md"
authors = [
    {name = "Claude Task Delegator Contributors", email = "dev@example.com"}
]
license = {text = "MIT"}
requires-python = ">=3.10"
dependencies = [
    "pyyaml>=6.0",
    "aiofiles>=23.0.0",
    "pexpect>=4.8.0",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]

[project.scripts]
claude-delegator = "task_delegator.cli:main"
claude-delegator-worker = "task_delegator.worker_cli:main"
claude-collaborative = "task_delegator.collaborative_cli:main"

[project.urls]
"Homepage" = "https://github.com/patrg444/Task-Delegator"
"Bug Tracker" = "https://github.com/patrg444/Task-Delegator/issues"
"Documentation" = "https://github.com/patrg444/Task-Delegator#readme"

[tool.setuptools.packages.find]
where = ["."]
include = ["task_delegator*"]

[tool.setuptools.package-data]
task_delegator = ["py.typed"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.git
  | \.pytest_cache
  | __pycache__
  | shared
  | logs
  | workers
)/
'''

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "C4",   # flake8-comprehensions
    "SIM",  # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]
exclude = [
    ".git",
    "__pycache__",
    "shared",
    "logs",
    "workers",
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
check_untyped_defs = true
no_implicit_optional = true
allow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
exclude = [
    "shared/",
    "logs/",
    "workers/",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
addopts = [
    "-v",
    "--strict-markers",
    "--cov=task_delegator",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["task_delegator"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
